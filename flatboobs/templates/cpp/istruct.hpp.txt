/* {{ iface_class }} */

{% if not struct_def.fixed %}
class {{ flatbuffer_class }};
{% endif %}

class {{ iface_class }} {
public:
  using value_variant_type = std::variant<{{
    fields|map("attr", "value")|map("attr", "type")
      |map("to_cpp_type")|unique|sort|join(", ")
  }}>;

  // Destructor
  virtual ~{{ iface_class }}() = default;

  // Operators
  const value_variant_type operator[](const std::string &key) const;
  friend bool operator== (const {{ iface_class }}&, const {{ iface_class }}&);
  friend bool operator!= (const {{ iface_class }}&, const {{ iface_class }}&);
  friend std::ostream& operator<< (std::ostream&, const {{ iface_class }}&);

  // Metadata
  static constexpr std::string_view fully_qualified_name() {
    return "{{ struct_def.fully_qualified_name }}";
  }
{% if not struct_def.fixed %}
  static constexpr std::string_view file_identifier() {
  {% if struct_def == parser.root_struct_def %}
    return "{{ parser.file_identifier }}";
  {% else %}
    return "";
  {% endif %}
  }
{% endif %}
  static constexpr std::array<std::string_view, {{ fields|count }}> keys() {
    return { {{ fields|map("attr", "name")|map("quote")|join(", ")}} };
  }

  // Getters
{% for field in fields %}
  virtual {{ field.value.type|to_cpp_type }} {{
      utils.escape(field.name) }}() const = 0;
{% endfor %}

  // Builder
  virtual flatboobs::content_id_t content_id () const = 0;
{% if not struct_def.fixed %}
  virtual flatbuffers::Offset<{{ flatbuffer_class }}> build(
    flatbuffers::FlatBufferBuilder &_fbb, bool finish = true) const;
  virtual flatbuffers::Offset<{{ flatbuffer_class }}> build(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::map<flatboobs::content_id_t, flatbuffers::uoffset_t> &_offset_map
    ) const;
{% endif %}

};

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
