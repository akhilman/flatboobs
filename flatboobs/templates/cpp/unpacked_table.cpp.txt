/* {{ flatbuffer_class }} */

// Verify

bool {{ flatbuffer_class }}::Verify(
    flatbuffers::Verifier &verifier) const {
  return VerifyTableStart(verifier) &&
{% for field in fields %}
{% if field.value.type.base_type.is_scalar() %}
  VerifyField<{{ field.value.type|to_flatbuf_type
    }}>(verifier, VT_{{ field.name|upper }}) &&
{% else %}
  // TODO {{ field.name }}
{% endif %}
{% endfor %}
  verifier.EndTable();
}

/* {{ unpacked_class }} */

// Constructors

{{ unpacked_class }}::{{ unpacked_class }}(
  std::shared_ptr<const flatboobs::IByteData> &_message,
  const {{ flatbuffer_class }} *_flatbuf
  ) : message_{_message}, flatbuf_{_flatbuf} {}

// Getters

{% for field in fields %}
{{ field.value.type|to_cpp_type }} {{ unpacked_class -}}
    ::{{ utils.escape(field.name) }}() const {
{% if field.value.type.definition is instance_of("EnumDef") %}
  return static_cast<{{ field.value.type|to_cpp_type -}}
    >(flatbuf_->{{ utils.escape(field.name) }}());
{% elif field.value.type.base_type.is_scalar() %}
  return flatbuf_->{{ utils.escape(field.name) }}();
{% else %}
  return nullptr;  // TODO {{ field.name }}
{% endif %}
}

{% endfor %}

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}

