{% set class_name = utils.class_name(struct_def) %}
{% set flatbuffer_class = utils.flatbuffer_class(struct_def) %}
{% set unpacked_class = utils.unpacked_class(struct_def) %}
{% set fields = struct_def.fields|rejectattr("attributes.deprecated")|list %}

{% if struct_def == parser.root_struct_def %}
  {% set file_identifier = parser.file_identifier %}
{% else %}
  {% set file_identifier = None %}
{% endif %}

/* {{ flatbuffer_class }} */

class {{ flatbuffer_class }} final : private flatbuffers::Table {
public:
  enum {
    {% for field in fields %}
      VT_{{ utils.escape(field.name)|upper }} = {{ field.value.offset }},
    {% endfor %}
  };

{% for field in fields %}
{% if field.value.type.base_type.is_scalar() %}
  inline {{ utils.flatbuffer_type(field.value.type) }} {# -#}
    {{ utils.escape(field.name) }}() const {
    return GetField<{{ utils.flatbuffer_type(field.value.type) }}>(
      VT_{{ utils.escape(field.name)|upper }} , {{ field.value.constant }});
  }
{% elif field.value.type.base_type == BaseType.STRUCT
      and field.value.type.definition.fixed %}
  inline const {{ utils.flatbuffer_type(field.value.type) }} *
    {{- utils.escape(field.name) }}() const {
    return GetStruct<const {{ utils.flatbuffer_type(field.value.type) }} *>(
      VT_{{ utils.escape(field.name)|upper }});
  }
{% elif field.value.type.base_type == BaseType.STRUCT
      and not field.value.type.definition.fixed %}
  inline const {{ utils.flatbuffer_type(field.value.type) }} *
    {{- utils.escape(field.name) }}() const {
    return GetPointer<const {{ utils.flatbuffer_type(field.value.type) }} *>(
      VT_{{ utils.escape(field.name)|upper }});
  }
{% else %}
    /* TODO {{ field }} */
{% endif %}
{% endfor %}

  inline bool Verify( flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
  {% for field in fields %}
  {% if field.value.type.base_type.is_scalar() %}
    VerifyField<{{ utils.flatbuffer_type(field.value.type)
      }}>(verifier, VT_{{ field.name|upper }}) &&
  {% elif field.value.type.base_type == BaseType.STRUCT
      and field.value.type.definition.fixed %}
    VerifyField<{{ utils.flatbuffer_type(field.value.type)
      }}>(verifier, VT_{{ field.name|upper }}) &&
  {% elif field.value.type.base_type == BaseType.STRUCT
      and not field.value.type.definition.fixed %}
    VerifyOffset(verifier, VT_{{ field.name|upper }}) &&
    verifier.VerifyTable({{ utils.escape(field.name) }}()) &&
  {% else %}
    // TODO {{ field.name }}
  {% endif %}
  {% endfor %}
    verifier.EndTable();
  }
};

// Verify {{ class_name }}
static bool verify_{{ class_name }}(const flatboobs::Data &_message) {
  auto verifier = flatbuffers::Verifier(
    reinterpret_cast<const uint8_t *>(_message.data()),
    _message.size()
    );
{% if file_identifier %}
  const char* identifier = "{{ file_identifier }}";
{% else %}
  const char* identifier = nullptr;
{% endif %}
  return verifier.VerifyBuffer<{{ flatbuffer_class }}>(identifier);
}

/* {{ unpacked_class }} */

class {{ unpacked_class }} : public {{ class_name }}::AbstractImpl {
public:
  explicit {{ unpacked_class }}(flatboobs::Data);
  explicit {{ unpacked_class }}(
    flatboobs::Data, const {{ flatbuffer_class }} *);

  // Metadata
  flatboobs::content_id_t content_id() const override;

  // Getters
{% for field in fields %}
  {{ utils.cpp_type(field.value.type) }} {{
    utils.escape(field.name) }}() const override;
{% endfor %}

private:
  const flatboobs::Data data_;
  const {{ flatbuffer_class }} *flatbuf_;

};

// Constructors

{{ unpacked_class }}::{{ unpacked_class }}(flatboobs::Data _message)
    : data_{std::move(_message)}, flatbuf_{nullptr} {

  if (!verify_{{ class_name }}(data_))
    throw flatboobs::unpack_error("{{ class_name }} message verification failed");

  flatbuf_ = flatbuffers::GetRoot<{{ flatbuffer_class }}>(data_.data());

}

{{ unpacked_class }}::{{ unpacked_class }}(
  flatboobs::Data _message,
  const {{ flatbuffer_class }} *_flatbuf
  ) : data_{std::move(_message)}, flatbuf_{_flatbuf} {}

// Metadata

flatboobs::content_id_t {{ unpacked_class }}::content_id() const {
  return flatboobs::content_id_t(flatbuf_);
}

// Getters

{% for field in fields %}
{{ utils.cpp_type(field.value.type) }} {{ unpacked_class -}}
    ::{{ utils.escape(field.name) }}() const {
{% if field.value.type.definition is instance_of("EnumDef") %}
  return static_cast<{{ utils.cpp_type(field.value.type) -}}
    >(flatbuf_->{{ utils.escape(field.name) }}());
{% elif field.value.type.base_type.is_scalar() %}
  return flatbuf_->{{ utils.escape(field.name) }}();
{% elif field.value.type.base_type == BaseType.STRUCT %}
  const {{ utils.flatbuffer_type(field.value.type) }} *value {flatbuf_->{{ utils.escape(field.name) }}()};
    if (value == nullptr)
      return {{ utils.cpp_type(field.value.type) }}();
    else
    {% if field.value.type.definition.fixed %}
      return *value;
    {% else %}
      return {{ utils.cpp_type(field.value.type) }}(data_, value);
    {% endif %}
{% else %}
  return;  // TODO {{ field.name }}
{% endif %}
}

{% endfor %}

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}

