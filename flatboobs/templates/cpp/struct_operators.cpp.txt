{% set class_name = utils.class_name(struct_def) %}
{% set fields = struct_def.fields|rejectattr("attributes.deprecated")|list %}

{{ class_name }}::value_variant_type {{ class_name }}::operator[](
    const std::string &_key) const {
{% for field in fields %}
  if (_key == "{{ field.name }}")
    return this->{{ utils.escape(field.name) }}();
{% endfor %}
  throw flatboobs::key_error(_key);
}

bool operator== (const {{ class_name }} &_lhs, const {{ class_name }} &_rhs){
  return
  {% set and_ = joiner(" && ") %}
  {% for field in fields %}
    {{ and_() }} _lhs.{{ utils.escape(field.name) }}() {# -#}
        == _rhs.{{ utils.escape(field.name) }}()
  {% endfor %}
  ;
}
bool operator!= (const {{ class_name }} &_lhs, const {{ class_name }} &_rhs){
  return !(_lhs == _rhs);
}

std::ostream & operator<< (std::ostream& _stream, const {{ class_name }}& _obj) {
  _stream << "{{ class_name }}("
  {% for field in fields %}
      << "{{ field.name }}="
  {% if field.value.type.base_type == BaseType.VECTOR %}
      << _obj.{{ utils.escape(field.name) }}()
  {% elif field.value.type.base_type == BaseType.BOOL %}
      << (_obj.{{ utils.escape(field.name) }}()
          ? "true" : "false")
  {% elif field.value.type.definition is instance_of("EnumDef") %}
      << {{ utils.cpp_type(field.value.type) }}_to_string(_obj.{{
        utils.escape(field.name) }}())
  {% elif field.value.type.base_type.is_scalar() %}
      << +_obj.{{ utils.escape(field.name) }}()
  {% elif field.value.type.base_type == BaseType.STRING %}
    << '"' << _obj.{{ utils.escape(field.name) }}() << '"'
  {% else %}
      << _obj.{{ utils.escape(field.name) }}()
  {% endif %}
  {% if not loop.last %}
    << ", "
  {% endif %}
  {% endfor %}
    << ")";
  return _stream;
};


{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
