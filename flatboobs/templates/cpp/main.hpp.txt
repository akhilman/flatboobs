{% import "cpp/utils.txt" as utils %}
/*
 * Generated by FlatBoobs from {{ parser.root_struct_def.file|basename }}
 */

#ifndef {{ output_file|include_guard }}
#define {{ output_file|include_guard }}

#include <cassert>
#include <map>
#include <sstream>
#include <variant>

#include <flatbuffers/flatbuffers.h>
#include <flatboobs/exceptions.hpp>
#include <flatboobs/flatboobs.hpp>

{% for name in parser.included_files.values()|reject("eq", "") %}
#include "{{ name|stem + '_flatboobs.hpp' }}"
{% endfor %}


/*
 * Forvard declaration of structs
 */

{% for group in parser.types
    | map(attribute="definition")
    | selectattr("file", "equalto", parser.root_struct_def.file)
    | groupby("defined_namespace") %}
{% for component in group.grouper.components %}
namespace {{ utils.escape(component) }} {
{% endfor %}

{% for definition in group.list|sort(attribute="name") %}
class {{ utils.class_name(definition) }};
// TODO: vector of {{ utils.class_name(definition) }}
{% endfor %}

{% for component in group.grouper.components|reverse %}
}  // {{ utils.escape(component) }}
{% endfor %}
{% endfor %}


{% for group in parser.types
    | map("attr", "definition")
    | selectattr("file", "equalto", parser.root_struct_def.file)
    | groupby("defined_namespace") %}
{% for component in group.grouper.components %}
namespace {{ utils.escape(component) }} {
{% endfor %}

/*
 * Declaration of enums
 */

{% for enum_def in group.list|select("instance_of", "EnumDef")
        |sort(attribute="name") %}
{% include "cpp/enum.hpp.txt" %}
{% endfor %}

/*
 * Declaration of structs and tables
 */

{% for struct_def in group.list|select("instance_of", "StructDef")
        |sort(attribute="name") %}
{% include "cpp/table.hpp.txt" %}
{% endfor %}

{% for component in group.grouper.components|reverse %}
}  // {{ utils.escape(component) }}
{% endfor %}
{% endfor %}


#endif  // {{ output_file|include_guard }}

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
