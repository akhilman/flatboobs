{% set class_name = utils.class_name(struct_def) %}
{% set impl_factory = utils.implement(struct_def) %}
{% set fields = struct_def.fields|rejectattr("attributes.deprecated")|list %}

/* {{ class_name }} */

// Constructor

{{ class_name }}::{{ class_name }}()
{% for field in fields %}
   {{- " : " if loop.first -}}
   {{ utils.escape(field.name) }}_ { {{ utils.default_value(field) }} }
   {{- "," if not loop.last }}
{% endfor %}
{}

{{ class_name }}::{{ class_name }}(
{% for field in fields %}
  {{ utils.cpp_type(field.value.type) }} _{{ utils.escape(field.name) }}
    {{- "," if not loop.last }}
{% endfor %}
)
{% for field_name in fields|map("attr", "name") %}
   {{- " : " if loop.first -}}
   {{ utils.escape(field_name) }}_ {std::move(_{{ utils.escape(field_name) }})}
   {{- "," if not loop.last }}
{% endfor %}
{}

// Evolve

{% set comma = joiner(", ") %}
{{ class_name }} {{ class_name }}::evolve (
{% for field in fields %}
  {{ comma() }} std::optional<{{ utils.cpp_type(field.value.type) }}> {# -#}
    _{{ utils.escape(field.name) }}
{% endfor %}
) {
  return {{ class_name }}(
  {% set comma = joiner(", ") %}
  {% for field in fields %}
    {% set field_name = utils.escape(field.name) %}
    {{ comma() }} _{{ field_name }} ? std::move(*_{{ field_name -}}
      ) : this->{{ field_name }}()
  {% endfor %}
  );
}

// Operators
{% include "cpp/struct_operators.cpp.txt" %}


{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
