{% import "cpp/utils.txt" as utils %}
{% if not header_only %}
/*
 * Generated by FlatBoobs from {{ schema_file|basename }}
 */

#include "{{ library_name }}/{{ schema_file|stem }}.hpp"
{% endif %}

/*
 * Template specializationt definition
 */

namespace flatboobs {

{% for struct_def in parser.structs|select("defined_here", parser)
      |rejectattr("fixed")|sort(attribute="name") %}
{% set class_name %}
  {{- utils.namespace(struct_def.defined_namespace) -}}
  ::{{ utils.class_name(struct_def) -}}
{% endset %}
template Message pack({{ class_name }});
template {{ class_name }} unpack<{{ class_name }}>(Message);
{% endfor %}

{% for struct_def in parser.structs|select("defined_here", parser)
        |rejectattr("fixed")|sort(attribute="name") %}
{% for field in struct_def.fields
    |selectattr("value.type.base_type", "eq", BaseType.VECTOR) %}
template class {{ utils.cpp_type(field.value.type) }};
template class VectorIterator<{{- utils.cpp_type(field.value.type) }}>;
{% endfor %}
{% endfor %}

}


{% for group in parser.types
    | map("attr", "definition")
    | select("defined_here", parser)
    | groupby("defined_namespace") %}
{% for component in group.grouper.components %}
namespace {{ utils.escape(component) }} {
{% endfor %}

/*
 * Implementation of enums
 */

{% for enum_def in group.list|select("instance_of", "EnumDef")
        |sort(attribute="name") %}
{% include "cpp/enum.cpp.txt" %}
{% endfor %}

/*
 * Implementation of structs
 */

{% for struct_def in group.list|select("instance_of", "StructDef")
        |selectattr("fixed") |sort(attribute="name") %}
{% include "cpp/struct_operators.cpp.txt" %}
{% include "cpp/mutable_struct.cpp.txt" %}
{% endfor %}

/*
 * Implementation of tables
 */

{% for struct_def in group.list|select("instance_of", "StructDef")
        |rejectattr("fixed")|sort(attribute="name") %}
{% include "cpp/struct_operators.cpp.txt" %}
{% include "cpp/table.cpp.txt" %}
{% endfor %}

{% for component in group.grouper.components|reverse %}
}  // {{ utils.escape(component) }}
{% endfor %}
{% endfor %}


{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
