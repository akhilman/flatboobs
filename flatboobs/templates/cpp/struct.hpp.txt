{% set class_name = utils.class_name(struct_def) %}
{% set class_name = class_name %}
{% set fields = struct_def.fields|rejectattr("attributes.deprecated")|list %}

/* {{ class_name }} */

struct alignas({{ struct_def.minalign }}) {{ class_name }}
  {#- #} : public flatboobs::BaseStruct {

  using value_variant_type = {{ utils.cpp_variant_type(
      fields|map("attr", "value")|map("attr", "type")) }};

  // Constructor
  {{ class_name }}();
  explicit {{ class_name }}(
  {% for field in fields %}
    {{ utils.cpp_type(field.value.type) }} _{{ utils.escape(field.name) }}
    {{- "," if not loop.last }}
  {% endfor %}
  );

  // Metadata
  static constexpr std::string_view fully_qualified_name() {
    return "{{ struct_def.fully_qualified_name }}";
  }
  static constexpr std::array<std::string_view, {{ fields|count }}> keys() {
    return { {{ fields|map("attr", "name")|map("quote")|join(", ")}} };
  }

  // Getters
{% for field in fields %}
  {{ utils.cpp_type(field.value.type) }} {{
    utils.escape(field.name) }}() const {
    return {{ utils.escape(field.name) }}_;
  }
{% endfor %}

  // Setters
{% for field in fields %}
  inline void set_{{ utils.escape(field.name) }}(
      {{- utils.cpp_type(field.value.type) }} _value) {
    {{ utils.escape(field.name) }}_ = std::move(_value);
  }
{% endfor %}

  // Evolve
  {{ class_name }} evolve (
  {% set comma = joiner(", ") %}
  {% for field in fields %}
    {{ comma() }} std::optional<{{ utils.cpp_type(field.value.type) }}> {# -#}
      _{{ utils.escape(field.name) }}
  {% endfor %}
  );

  // Operators
  const value_variant_type operator[](const std::string &_key) const;
  friend bool operator== (const {{ class_name }}&, const {{ class_name }}&);
  friend bool operator!= (const {{ class_name }}&, const {{ class_name }}&);
  friend std::ostream& operator<< (std::ostream&, const {{ class_name }}&);

  // Fields
{% for field in fields %}
  {{ utils.cpp_type(field.value.type) }} {{utils.escape(field.name) }}_;
{% endfor %}

};

static_assert(sizeof({{ class_name }}) == {{ struct_def.bytesize -}}
              , "compiler breaks packing rules");

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
