{% set class_name = utils.class_name(struct_def) %}
{% if struct_def.fixed %}
  {% set struct_name = utils.class_name(struct_def) %}
{% else %}
  {% set struct_name = utils.mutable_class(struct_def) %}
{% endif %}
{% set fields = struct_def.fields|rejectattr("attributes.deprecated")|list %}

/* {{ struct_name }} */

// Constructor
{{ struct_name }}::{{ struct_name }}(
{% for field in fields %}
  {{ utils.cpp_type(field.value.type) }} {# -#}
    _{{ utils.escape(field.name) }}
    {{- "," if not loop.last }}
{% endfor %}
) :
{% for field_name in fields|map("attr", "name") %}
   {{ utils.escape(field_name) }}_ {std::move(_{{ utils.escape(field_name) }})}
   {{- "," if not loop.last }}
{% endfor %}
{}

// Operators

const {{ struct_name }}::value_variant_type
    {{ struct_name }}::operator[](const std::string &_key) const {
  return get_from_{{ class_name }}_by_key(*this, _key);
}

bool operator== (const {{ struct_name }} &_lhs, const {{ struct_name }} &_rhs){
  return is_{{ class_name }}_eq(_lhs, _rhs);
}
bool operator!= (const {{ struct_name }} &_lhs, const {{ struct_name }} &_rhs){
  return is_{{ class_name }}_ne(_lhs, _rhs);
}

std::ostream& operator<< (std::ostream &_stream, const {{ struct_name }} &_obj) {
  return print_{{ class_name }}(_stream, _obj);
};

{#
// vim: syntax=cpp
// vim: tabstop=2
// vim: shiftwidth=2
#}
