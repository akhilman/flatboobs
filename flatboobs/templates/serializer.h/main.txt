/*
 * Generated by FlatBoobs from {{ parser.root_struct_def.file|basename }}
 */

#ifndef {{ output_file|include_guard }}
#define {{ output_file|include_guard }}

#include <flatboobs/container.h>
#include <flatbuffers/flatbuffers.h>

#include "{{ parser.root_struct_def.file|stem + "_generated.h" }}"
{% for file in parser.native_included_files %}
#include "{{ file|stem + "_generate_py.h" }}"
{% endfor %}

namespace py = pybind11;
namespace fb = flatbuffers;
namespace fbb = flatboobs;


/*
 * Pre-declare structs
 */
{#
{% for group in parser.structs
    | selectattr("file", "equalto", parser.root_struct_def.file)
    | groupby("defined_namespace") %}
{% for component in group.grouper.components %}
namespace {{ component }} {
{% endfor %}

{% for struct_def in group.list|sort(attribute="name") %}
class {{ "Py" + struct_def.name|escape_cpp_keyword }};
{% endfor %}

{% for component in group.grouper.components|reverse %}
}  // {{ component }}
{% endfor %}
{% endfor %}
#}


/*
 *Define structs
 */
{#
{% for group in parser.structs
    | selectattr("file", "equalto", parser.root_struct_def.file)
    | groupby("defined_namespace") %}
{% for component in group.grouper.components %}
namespace {{ component }} {
{% endfor %}

{% for struct_def in group.list|sort(attribute="name") %}
{% set base_class = "Struct" if struct_def.fixed else "Table" %}
class {{ "Py" + struct_def.name|escape_cpp_keyword -}}
    : public fbb::{{ base_class }} {
public:
  using fbb::{{ base_class }}::{{base_class}};

  struct Fields : fbb::{{ base_class }}::Fields {
    using fbb::{{ base_class }}::Fields::Fields;

    {% for field in struct_def.fields %}
      // {{ field.name }}

    {% endfor %}
  };

};

{% endfor %}

{% for component in group.grouper.components|reverse %}
}  // {{ component }}
{% endfor %}
{% endfor %}
#}


#endif  // {{ output_file|include_guard }}

// vim: syntax=cpp
