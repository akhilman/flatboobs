
    {% set element_type = field.value.type.element
        if field.value.type.base_type == BaseType.VECTOR
        else field.value.type.base_type %}
    {% if element_type.is_scalar() %}
      {% set cpp_type = element_type|to_cpp_type %}
    {% elif element_type == BaseType.STRUCT %}
      {% set cpp_type = "Py"
              + field.value.type.definition.name|escape_cpp_keyword %}
    {% elif element_type == BaseType.ENUM %}
      {% set cpp_type = field.value.type.definition.name|escape_cpp_keyword %}
    {% elif element_type == BaseType.STRING %}
      {% set cpp_type = "std::shared_ptr<std::string>" %}
    {% else %}
      {% set cpp_type = "WTF" %}
    {% endif %}
    {% if field.value.type.base_type == BaseType.VECTOR %}
      {% set cpp_type = "std::shared_ptr<fbb::Vector<" + cpp_type + ">>" %}
    {% elif not element_type.is_scalar() and element_type != BaseType.ENUM %}
      {% set cpp_type = "std::shared_ptr<" + cpp_type + ">" %}
    {% endif %}
      // {{ cpp_type }} {{ field.name }}
      {{ cpp_type }} {{ field.name|escape_cpp_keyword }}();
      {% if not struct_def.fixed %}
      {{ cpp_type }} __{{ field.name|escape_cpp_keyword }}_mutation;
      bool __is_{{ field.name|escape_cpp_keyword }}_mutated;
      {% endif %}

// vim: syntax=cpp
