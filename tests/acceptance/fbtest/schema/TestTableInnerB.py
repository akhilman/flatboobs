# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers

class TestTableInnerB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTestTableInnerB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TestTableInnerB()
        x.Init(buf, n + offset)
        return x

    # TestTableInnerB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TestTableInnerB
    def ValueA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TestTableInnerB
    def ValueB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TestTableInnerB
    def ValueC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def TestTableInnerBStart(builder): builder.StartObject(3)
def TestTableInnerBAddValueA(builder, valueA): builder.PrependUint8Slot(0, valueA, 0)
def TestTableInnerBAddValueB(builder, valueB): builder.PrependUint8Slot(1, valueB, 0)
def TestTableInnerBAddValueC(builder, valueC): builder.PrependUint8Slot(2, valueC, 0)
def TestTableInnerBEnd(builder): return builder.EndObject()
