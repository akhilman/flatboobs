# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers

class TestStruct(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTestStruct(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TestStruct()
        x.Init(buf, n + offset)
        return x

    # TestStruct
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TestStruct
    def Foo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TestStruct
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .TestStructStruct import TestStructStruct
            obj = TestStructStruct()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TestStruct
    def Bar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TestStructStart(builder): builder.StartObject(3)
def TestStructAddFoo(builder, foo): builder.PrependUint32Slot(0, foo, 0)
def TestStructAddValue(builder, value): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def TestStructAddBar(builder, bar): builder.PrependUint32Slot(2, bar, 0)
def TestStructEnd(builder): return builder.EndObject()
