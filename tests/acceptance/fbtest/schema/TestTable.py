# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers

class TestTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTestTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TestTable()
        x.Init(buf, n + offset)
        return x

    # TestTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TestTable
    def InnerA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TestTableInnerA import TestTableInnerA
            obj = TestTableInnerA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TestTable
    def InnerACopy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TestTableInnerA import TestTableInnerA
            obj = TestTableInnerA()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TestTable
    def InnerB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TestTableInnerB import TestTableInnerB
            obj = TestTableInnerB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TestTableStart(builder): builder.StartObject(3)
def TestTableAddInnerA(builder, innerA): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(innerA), 0)
def TestTableAddInnerACopy(builder, innerACopy): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(innerACopy), 0)
def TestTableAddInnerB(builder, innerB): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(innerB), 0)
def TestTableEnd(builder): return builder.EndObject()
