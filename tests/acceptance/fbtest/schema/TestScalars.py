# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers

class TestScalars(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTestScalars(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TestScalars()
        x.Init(buf, n + offset)
        return x

    # TestScalars
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TestScalars
    def Int8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Int16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Int32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Int64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Uint8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Uint16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Uint32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Uint64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # TestScalars
    def Float32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TestScalars
    def Float64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # TestScalars
    def BoolTrue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TestScalars
    def BoolFalse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TestScalarsStart(builder): builder.StartObject(13)
def TestScalarsAddInt8(builder, int8): builder.PrependInt8Slot(1, int8, 0)
def TestScalarsAddInt16(builder, int16): builder.PrependInt16Slot(2, int16, 0)
def TestScalarsAddInt32(builder, int32): builder.PrependInt32Slot(3, int32, 0)
def TestScalarsAddInt64(builder, int64): builder.PrependInt64Slot(4, int64, 0)
def TestScalarsAddUint8(builder, uint8): builder.PrependUint8Slot(5, uint8, 0)
def TestScalarsAddUint16(builder, uint16): builder.PrependUint16Slot(6, uint16, 0)
def TestScalarsAddUint32(builder, uint32): builder.PrependUint32Slot(7, uint32, 0)
def TestScalarsAddUint64(builder, uint64): builder.PrependUint64Slot(8, uint64, 0)
def TestScalarsAddFloat32(builder, float32): builder.PrependFloat32Slot(9, float32, 0.0)
def TestScalarsAddFloat64(builder, float64): builder.PrependFloat64Slot(10, float64, 0.0)
def TestScalarsAddBoolTrue(builder, boolTrue): builder.PrependBoolSlot(11, boolTrue, 0)
def TestScalarsAddBoolFalse(builder, boolFalse): builder.PrependBoolSlot(12, boolFalse, 0)
def TestScalarsEnd(builder): return builder.EndObject()
